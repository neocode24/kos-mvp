def label = "manage-cache-${UUID.randomUUID().toString()}"

def notifyStarted() {
    slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}

def notifySuccessful() {
    slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}

def notifyFailed() {
  slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}

podTemplate(label: label, 
	containers: [
	  containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
	  containerTemplate(name: 'docker', image: 'docker:stable', ttyEnabled: true, command: 'cat'),
	  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.0', command: 'cat', ttyEnabled: true)
	],
	volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]
	) {
	
	node(label) {
	try {
		
	  def commitId 
	  stage('Get Source') {
		git url: "http://gitlab.169.56.74.2.nip.io/kos/kos-mvp.git",
		    credentialsId: 'gitlab',
		    branch: 'master'
		    commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
	  }

	  def props = readProperties  file:'redis-cache-manager/pipeline.properties'
	  def tag = commitId
	  def gitSrc = props['gitSrc']
	  def dockerRegistry = props['dockerRegistry']
	  def image = props['image']
	  def deployment = props['deployment']
	  def service = props['service']
	  def selector = props['selector']
	  def namespace = props['namespace']

/*	    
	  stage('Build Maven project') {
		container('maven') {
			dir("redis-cache-manager") {
				sh "ls -al"
				sh "pwd"
				sh "mvn -B clean package -DskipTests"
			}
		}
	  }
*/
/*	
	  stage('Inspection Code') {
		container('maven') {
			sh "mvn sonar:sonar \
  -Dsonar.host.url=http://169.56.74.11:31440 \
  -Dsonar.login=8c26193ec4a2fb6f370d175225c3958ba08b9477"
		}
	  }
*/	 
/* 
	  stage('Build Docker image') {
		container('docker') {
			dir("redis-cache-manager") {
		  		docker.withRegistry("${dockerRegistry}", 'registry-credentials') {
				sh "docker build -t ${image}:${tag} ."
				sh "docker push ${image}:${tag}"
				sh "docker tag ${image}:${tag} ${image}:latest"
				sh "docker push ${image}:latest"
			  	}
			}
		}
	  }*/
	  /*stage( 'Clean Up Existing Deployments' ) {
		container('kubectl') {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding',
							  credentialsId: 'registry-credentials',
							  usernameVariable: 'DOCKER_HUB_USER',
							  passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
			  
			  sh "kubectl delete -n ${namespace} -f ${deployment}"
			  sh "kubectl delete -n ${namespace} -f ${service}"
		  }
		}
	  }*/
	  stage( 'Deploy to Cluster' ) {
		container('kubectl') {
		  		withCredentials([[$class: 'UsernamePasswordMultiBinding',
							  credentialsId: 'registry-credentials',
							  usernameVariable: 'DOCKER_HUB_USER',
							  passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
			 
			sh "cat ${deployment}|sed -e 's/image:.*/${dockerRegistry}:${image}:${tag}/g'>${deployment}"
			sh "kubectl apply -n ${namespace} -f ${deployment}"
			sh "sleep 5"
			sh "kubectl apply -n ${namespace} -f ${service}"
		 	} 
		}
	  }
		
	  notifySuccessful()
	  } catch(e) {
        currentBuild.result = "FAILED"
        notifyFailed()
    }
    
  }
}
